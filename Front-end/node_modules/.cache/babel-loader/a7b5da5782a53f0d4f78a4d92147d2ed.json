{"ast":null,"code":"var _jsxFileName = \"/home/mahesha/Documents/Mini_Project/Front-end/src/components/pages/KickCounter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport '../TimerCounter/Counter.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst KIckCounter = () => {\n  _s();\n\n  const [hour, setHour] = useState('00');\n  const [minutes, setMinutes] = useState('00');\n  const [second, setSecond] = useState('00');\n  const [isActive, setIsActive] = useState(false);\n  const [counter, setCounter] = useState(0);\n  const [count, setCount] = useState(1);\n\n  const incrementCount = () => {\n    if (count < 100) {\n      setCount(count + 1);\n    }\n\n    if (count > 1) {\n      setSecond(parseInt(second) + count);\n    }\n\n    if (second <= 59) {\n      setSecond(parseInt(second));\n    }\n  };\n\n  const resetTime = () => {\n    setSecond('00');\n    setMinutes('00');\n    setHour(1);\n    setCount(1);\n    setCounter(0); // setIsActive(false)\n  };\n\n  useEffect(() => {\n    let intervalId;\n\n    if (isActive) {\n      intervalId = setInterval(() => {\n        const secondCounter = counter % 60;\n        const minuteCounter = Math.floor(counter / 60);\n        const hourCounter = Math.floor(counter / (1000 * 60 * 60) % 24);\n        const computedSecond = String(secondCounter).length === 1 ? `0${secondCounter}` : secondCounter;\n        const computedMinute = String(minuteCounter).length === 1 ? `0${minuteCounter}` : minuteCounter;\n        const computedHour = String(hourCounter).length === 1 ? `0${hourCounter}` : hourCounter;\n\n        if (computedSecond <= 0) {\n          setSecond('00');\n          setMinutes('00');\n          setHour('00');\n        } else {\n          setSecond(computedSecond);\n          setMinutes(computedMinute);\n          setHour(computedHour);\n        } // setCounter(()=>counter+count)\n\n      }, 500);\n    }\n\n    return () => clearInterval(intervalId);\n  }, [isActive, counter]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"kickCounter\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"hour\",\n        children: hour\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"hour\",\n        children: minutes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"hour\",\n        children: second\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start\",\n        onClick: () => setIsActive(!isActive),\n        children: [\" \", isActive ? 'Pause' : 'Start', \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetTime,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counter\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incrementCount,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(KIckCounter, \"ymXTpXg6jByVn0SuWe+VYApozVI=\");\n\n_c = KIckCounter;\nexport default KIckCounter;\n\nvar _c;\n\n$RefreshReg$(_c, \"KIckCounter\");","map":{"version":3,"sources":["/home/mahesha/Documents/Mini_Project/Front-end/src/components/pages/KickCounter.js"],"names":["React","useEffect","useState","KIckCounter","hour","setHour","minutes","setMinutes","second","setSecond","isActive","setIsActive","counter","setCounter","count","setCount","incrementCount","parseInt","resetTime","intervalId","setInterval","secondCounter","minuteCounter","Math","floor","hourCounter","computedSecond","String","length","computedMinute","computedHour","clearInterval"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../TimerCounter/Counter.css';\n\n\n\nconst KIckCounter = () => {\n  const [hour, setHour] = useState('00')\n  const [minutes, setMinutes] = useState('00')\n  const [second, setSecond] = useState('00')\n  const [isActive, setIsActive] = useState(false)\n  const [counter, setCounter] = useState(0)\n  const [count, setCount] = useState(1)\n\n  const incrementCount = () => {\n\n    if(count<100){\n      setCount(count+1)\n    }\n    if(count > 1){\n      setSecond(parseInt(second)+count)\n    }\n    if(second<=59){\n      setSecond(parseInt(second))\n    }\n  }\n\n  const resetTime = ()=>{\n    setSecond('00')\n    setMinutes('00')\n    setHour(1)\n    setCount(1)\n    setCounter(0)\n    // setIsActive(false)\n  }\n\n  useEffect(()=>{\n    let intervalId;\n    if(isActive){\n      intervalId=setInterval(()=>{\n        const secondCounter=counter % 60\n        const minuteCounter = Math.floor(counter/60)\n        const hourCounter=Math.floor((counter/(1000*60*60))%24)\n\n        const computedSecond = String(secondCounter).length === 1? `0${secondCounter}` : secondCounter\n        const computedMinute = String(minuteCounter).length === 1? `0${minuteCounter}` : minuteCounter\n        const computedHour = String(hourCounter).length === 1? `0${hourCounter}` : hourCounter\n        \n        if(computedSecond<=0){\n          setSecond('00')\n          setMinutes('00')\n          setHour('00')\n        }\n        else{\n          setSecond(computedSecond)\n          setMinutes(computedMinute)\n          setHour(computedHour)\n        }\n        // setCounter(()=>counter+count)\n\n      },500)\n    }\n    return () => clearInterval(intervalId)\n  },[isActive,counter])\n\n\n  return (\n    <div className='kickCounter'>\n      <div className='timer'>\n        <span className='hour'>{hour}</span>\n        <span>:</span>\n        <span className='hour'>{minutes}</span>\n        <span>:</span>\n        <span className='hour'>{second}</span>\n      </div>\n      <div className='buttons'>\n        <button className='start' onClick={()=>setIsActive(!isActive)}> { isActive ? 'Pause' : 'Start' } </button>\n        <button onClick={resetTime}>Reset</button>\n      </div>\n      <div className='counter'>\n        <button onClick={incrementCount}>+</button>\n        <h1>{count}</h1>\n        <button>-</button>\n      </div>\n    </div>\n  );\n}\n\nexport default KIckCounter;"]},"metadata":{},"sourceType":"module"}