{"ast":null,"code":"// import React from \"react\";\n// import { Form, Button } from \"react-bootstrap\";\n// import DateTimePicker from \"react-datetime-picker\";\n// import '../welcome/CountDown.css'\n// export default class CountDown extends React.Component {\n//   state = {\n//     endDate: new Date(),\n//     weeks: 0,\n//     days: 0,\n//     hours: 0,\n//     minutes: 0,\n//     errorMsg: ''\n//   };\n//   componentWillUnmount() {\n//     clearTimeout(this.timer);\n//   }\n//   onEndDateChange = endDate => {\n//     this.setState({ endDate });\n//   }\n//   getTwoDigitValue = value => {\n//     if (value < 10) {\n//       return '0' + value;\n//     }\n//     return '' + value;\n//   }\n//   calculateCountdown = () => {\n//     const startDate = new Date();\n//     const { endDate } = this.state;\n//     this.setState({ errorMsg: '' });\n//     const timeRemaining = endDate.getTime() - startDate.getTime();\n//     if(timeRemaining > 0) {\n//       const start_date = new Date(startDate);\n//       const end_date = new Date(endDate);\n//       const start_millis = start_date.getTime(); // Get timestamp of start date\n//       const end_millis = end_date.getTime(); // Get timestamp of end date\n//       // Convert to seconds, 1 second = 1000 milli seconds\n//       const old_sec = start_millis / 1000;\n//       const current_sec = end_millis / 1000;\n//       // Get remaining seconds\n//       let seconds = current_sec - old_sec;\n//       let weeks = Math.floor(seconds / (24 * 60 * 60 * 7)); // 1 day is equal to 24 hours, each hour has 60 mins and 60 seconds\n//       seconds -= weeks * 24 * 60 * 60 * 7; // Get remaining seconds\n//       let days = Math.floor(seconds / (24 * 60 * 60)); // 1 day is equal to 24 hours, each hour has 60 mins and 60 seconds\n//       seconds -= days * 24 * 60 * 60; // Get remaining seconds\n//       let hours = Math.floor(seconds / (60 * 60)); // 1 hour has 60 mins and 60 seconds\n//       seconds -= hours * 60 * 60; // Get remaining seconds\n//       let minutes = Math.floor(seconds / 60); // 1 minute is equal to 60 seconds\n//       seconds -= minutes * 60; // Get remaining seconds\n//       weeks   = Math.abs(weeks)\n//       days    = Math.abs(days);\n//       hours   = Math.abs(hours);\n//       minutes = Math.abs(minutes);\n//       this.setState(() => ({\n//         weeks, days, hours, minutes\n//       }), () => {\n//         this.timer = setTimeout(this.calculateCountdown, 1000);\n//       });\n//     } else {\n//       this.setState({ errorMsg: 'Times up!'});\n//       clearTimeout(this.timer);\n//     }\n//   };\n//   render() {\n//     const { weeks, days, hours, minutes, errorMsg } = this.state;\n//     const convertedWeeks = this.getTwoDigitValue(weeks);\n//     const convertedDays = this.getTwoDigitValue(days);\n//     const convertedHours = this.getTwoDigitValue(hours);\n//     const convertedMins = this.getTwoDigitValue(minutes);\n//     return (\n//       <div>\n//         <div className=\"counter\">\n//         <div className=\"time\">\n//               <div className=\"time-value\">{convertedWeeks}</div>\n//               <div className=\"time-label\">Weeks</div>\n//           </div>\n//           <div className=\"time\">\n//               <div className=\"time-value\">{convertedDays}</div>\n//               <div className=\"time-label\">Days</div>\n//           </div>\n//           <div className=\"time\">\n//           <div className=\"time-value\">{convertedHours}</div>\n//           <div className=\"time-label\">Hours</div>\n//           </div>\n//           <div className=\"time\">\n//               <div className=\"time-value\">{convertedMins}</div>\n//               <div className=\"time-label\">Minutes</div>\n//           </div>\n//       </div>\n//       <div className=\"date-time-form\">\n//          {errorMsg && <p className=\"error-msg\">{errorMsg}</p>}\n//          <Form>\n//            <Form.Group controlId=\"end_date\">\n//              <Form.Label>Due Date</Form.Label>\n//              <DateTimePicker\n//                format=\"dd/MM/y h:mm a\"\n//                onChange={this.onEndDateChange}\n//                value={this.state.endDate}\n//              />\n//            </Form.Group>\n//            <Button\n//              variant=\"primary\"\n//              type=\"button\"\n//              onClick={this.calculateCountdown}\n//            >\n//              Begin Countdown\n//            </Button>\n//          </Form>\n//        </div>\n//       </div>\n//     );\n//   }\n// }","map":{"version":3,"sources":["/home/mahesha/Documents/3rd Year 1 Semester/Mini Project (IS31230)/Mini_Project/src/components/welcome/CountDown.js"],"names":[],"mappingssourcesContent":["// import React from \"react\";\n// import { Form, Button } from \"react-bootstrap\";\n// import DateTimePicker from \"react-datetime-picker\";\n// import '../welcome/CountDown.css'\n\n// export default class CountDown extends React.Component {\n//   state = {\n//     endDate: new Date(),\n//     weeks: 0,\n//     days: 0,\n//     hours: 0,\n//     minutes: 0,\n//     errorMsg: ''\n//   };\n\n//   componentWillUnmount() {\n//     clearTimeout(this.timer);\n//   }\n\n//   onEndDateChange = endDate => {\n//     this.setState({ endDate });\n//   }\n\n//   getTwoDigitValue = value => {\n//     if (value < 10) {\n//       return '0' + value;\n//     }\n//     return '' + value;\n//   }\n  \n//   calculateCountdown = () => {\n//     const startDate = new Date();\n//     const { endDate } = this.state;\n    \n//     this.setState({ errorMsg: '' });\n    \n//     const timeRemaining = endDate.getTime() - startDate.getTime();\n\n//     if(timeRemaining > 0) {\n//       const start_date = new Date(startDate);\n//       const end_date = new Date(endDate);\n//       const start_millis = start_date.getTime(); // Get timestamp of start date\n//       const end_millis = end_date.getTime(); // Get timestamp of end date\n\n//       // Convert to seconds, 1 second = 1000 milli seconds\n//       const old_sec = start_millis / 1000;\n//       const current_sec = end_millis / 1000;\n\n//       // Get remaining seconds\n//       let seconds = current_sec - old_sec;\n\n//       let weeks = Math.floor(seconds / (24 * 60 * 60 * 7)); // 1 day is equal to 24 hours, each hour has 60 mins and 60 seconds\n//       seconds -= weeks * 24 * 60 * 60 * 7; // Get remaining seconds\n\n//       let days = Math.floor(seconds / (24 * 60 * 60)); // 1 day is equal to 24 hours, each hour has 60 mins and 60 seconds\n//       seconds -= days * 24 * 60 * 60; // Get remaining seconds\n\n//       let hours = Math.floor(seconds / (60 * 60)); // 1 hour has 60 mins and 60 seconds\n//       seconds -= hours * 60 * 60; // Get remaining seconds\n\n//       let minutes = Math.floor(seconds / 60); // 1 minute is equal to 60 seconds\n//       seconds -= minutes * 60; // Get remaining seconds\n      \n//       weeks   = Math.abs(weeks)\n//       days    = Math.abs(days);\n//       hours   = Math.abs(hours);\n//       minutes = Math.abs(minutes);\n   \n\n//       this.setState(() => ({\n//         weeks, days, hours, minutes\n//       }), () => {\n//         this.timer = setTimeout(this.calculateCountdown, 1000);\n//       });\n//     } else {\n//       this.setState({ errorMsg: 'Times up!'});\n//       clearTimeout(this.timer);\n//     }\n//   };\n\n//   render() {\n//     const { weeks, days, hours, minutes, errorMsg } = this.state;\n//     const convertedWeeks = this.getTwoDigitValue(weeks);\n//     const convertedDays = this.getTwoDigitValue(days);\n//     const convertedHours = this.getTwoDigitValue(hours);\n//     const convertedMins = this.getTwoDigitValue(minutes);\n\n//     return (\n//       <div>\n          \n//         <div className=\"counter\">\n//         <div className=\"time\">\n//               <div className=\"time-value\">{convertedWeeks}</div>\n//               <div className=\"time-label\">Weeks</div>\n//           </div>\n//           <div className=\"time\">\n//               <div className=\"time-value\">{convertedDays}</div>\n//               <div className=\"time-label\">Days</div>\n//           </div>\n//           <div className=\"time\">\n//           <div className=\"time-value\">{convertedHours}</div>\n//           <div className=\"time-label\">Hours</div>\n//           </div>\n//           <div className=\"time\">\n//               <div className=\"time-value\">{convertedMins}</div>\n//               <div className=\"time-label\">Minutes</div>\n//           </div>\n//       </div>\n\n//       <div className=\"date-time-form\">\n         \n//          {errorMsg && <p className=\"error-msg\">{errorMsg}</p>}\n//          <Form>\n//            <Form.Group controlId=\"end_date\">\n//              <Form.Label>Due Date</Form.Label>\n//              <DateTimePicker\n//                format=\"dd/MM/y h:mm a\"\n//                onChange={this.onEndDateChange}\n//                value={this.state.endDate}\n//              />\n//            </Form.Group>\n//            <Button\n//              variant=\"primary\"\n//              type=\"button\"\n//              onClick={this.calculateCountdown}\n//            >\n//              Begin Countdown\n//            </Button>\n//          </Form>\n//        </div>\n//       </div>\n//     );\n//   }\n// }"]},"metadata":{},"sourceType":"module"}