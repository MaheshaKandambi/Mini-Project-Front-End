{"ast":null,"code":"var _jsxFileName = \"/home/mahesha/Mini_Project/src/components/welcome/CountDown.js\";\nimport React from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\nimport DateTimePicker from \"react-datetime-picker\";\nimport '../welcome/CountDown.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Timer extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      endDate: new Date(),\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n      errorMsg: ''\n    };\n\n    this.onEndDateChange = endDate => {\n      this.setState({\n        endDate\n      });\n    };\n\n    this.getTwoDigitValue = value => {\n      if (value < 10) {\n        return '0' + value;\n      }\n\n      return '' + value;\n    };\n\n    this.calculateCountdown = () => {\n      const startDate = new Date();\n      const {\n        endDate\n      } = this.state;\n      this.setState({\n        errorMsg: ''\n      });\n      const timeRemaining = endDate.getTime() - startDate.getTime();\n\n      if (timeRemaining > 0) {\n        const start_date = new Date(startDate);\n        const end_date = new Date(endDate);\n        const start_millis = start_date.getTime(); // Get timestamp of start date\n\n        const end_millis = end_date.getTime(); // Get timestamp of end date\n        // Convert to seconds, 1 second = 1000 milli seconds\n\n        const old_sec = start_millis / 1000;\n        const current_sec = end_millis / 1000; // Get remaining seconds\n\n        let seconds = current_sec - old_sec;\n        let days = Math.floor(seconds / (24 * 60 * 60)); // 1 day is equal to 24 hours, each hour has 60 mins and 60 seconds\n\n        seconds -= days * 24 * 60 * 60; // Get remaining seconds\n\n        let hours = Math.floor(seconds / (60 * 60)); // 1 hour has 60 mins and 60 seconds\n\n        seconds -= hours * 60 * 60; // Get remaining seconds\n\n        let minutes = Math.floor(seconds / 60); // 1 minute is equal to 60 seconds\n\n        seconds -= minutes * 60; // Get remaining seconds\n\n        days = Math.abs(days);\n        hours = Math.abs(hours);\n        minutes = Math.abs(minutes);\n        seconds = Math.floor(Math.abs(seconds));\n        this.setState(() => ({\n          days,\n          hours,\n          minutes,\n          seconds\n        }), () => {\n          this.timer = setTimeout(this.calculateCountdown, 1000);\n        });\n      } else {\n        this.setState({\n          errorMsg: 'Times up!'\n        });\n        clearTimeout(this.timer);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.setState({\n      time: Date.now()\n    }), 1000);\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timer);\n  }\n\n  render() {\n    const {\n      days,\n      hours,\n      minutes,\n      seconds,\n      errorMsg\n    } = this.state;\n    const convertedDays = this.getTwoDigitValue(days);\n    const convertedHours = this.getTwoDigitValue(hours);\n    const convertedMins = this.getTwoDigitValue(minutes);\n    const convertedSeconds = this.getTwoDigitValue(seconds);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-time-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Countdown Timer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 12\n        }, this), errorMsg && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-msg\",\n          children: errorMsg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"end_date\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"End Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DateTimePicker, {\n              format: \"dd/MM/y h:mm:ss a\",\n              onChange: this.onEndDateChange,\n              value: this.state.endDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"button\",\n            onClick: this.calculateCountdown,\n            children: \"Begin Countdown\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"counter\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-value\",\n            children: convertedDays\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-label\",\n            children: \"Days\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-value\",\n            children: convertedHours\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-label\",\n            children: \"Hours\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-value\",\n            children: convertedMins\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-label\",\n            children: \"Minutes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-value\",\n            children: convertedSeconds\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-label\",\n            children: \"Seconds\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/mahesha/Mini_Project/src/components/welcome/CountDown.js"],"names":["React","Form","Button","DateTimePicker","Timer","Component","state","endDate","Date","days","hours","minutes","seconds","errorMsg","onEndDateChange","setState","getTwoDigitValue","value","calculateCountdown","startDate","timeRemaining","getTime","start_date","end_date","start_millis","end_millis","old_sec","current_sec","Math","floor","abs","timer","setTimeout","clearTimeout","componentDidMount","interval","setInterval","time","now","componentWillUnmount","render","convertedDays","convertedHours","convertedMins","convertedSeconds"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\nimport DateTimePicker from \"react-datetime-picker\";\nimport '../welcome/CountDown.css'\n\nexport default class Timer extends React.Component {\n  state = {\n    endDate: new Date(),\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n    errorMsg: ''\n  };\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.setState({ time: Date.now() }), 1000);\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timer);\n  }\n\n  onEndDateChange = endDate => {\n    this.setState({ endDate });\n  }\n\n  getTwoDigitValue = value => {\n    if (value < 10) {\n      return '0' + value;\n    }\n    return '' + value;\n  }\n  \n  calculateCountdown = () => {\n    const startDate = new Date();\n    const { endDate } = this.state;\n    \n    this.setState({ errorMsg: '' });\n    \n    const timeRemaining = endDate.getTime() - startDate.getTime();\n\n    if(timeRemaining > 0) {\n      const start_date = new Date(startDate);\n      const end_date = new Date(endDate);\n      const start_millis = start_date.getTime(); // Get timestamp of start date\n      const end_millis = end_date.getTime(); // Get timestamp of end date\n\n      // Convert to seconds, 1 second = 1000 milli seconds\n      const old_sec = start_millis / 1000;\n      const current_sec = end_millis / 1000;\n\n      // Get remaining seconds\n      let seconds = current_sec - old_sec;\n\n      let days = Math.floor(seconds / (24 * 60 * 60)); // 1 day is equal to 24 hours, each hour has 60 mins and 60 seconds\n      seconds -= days * 24 * 60 * 60; // Get remaining seconds\n\n      let hours = Math.floor(seconds / (60 * 60)); // 1 hour has 60 mins and 60 seconds\n      seconds -= hours * 60 * 60; // Get remaining seconds\n\n      let minutes = Math.floor(seconds / 60); // 1 minute is equal to 60 seconds\n      seconds -= minutes * 60; // Get remaining seconds\n\n      days    = Math.abs(days);\n      hours   = Math.abs(hours);\n      minutes = Math.abs(minutes);\n      seconds = Math.floor(Math.abs(seconds));\n\n      this.setState(() => ({\n        days, hours, minutes, seconds\n      }), () => {\n        this.timer = setTimeout(this.calculateCountdown, 1000);\n      });\n    } else {\n      this.setState({ errorMsg: 'Times up!'});\n      clearTimeout(this.timer);\n    }\n  };\n\n  render() {\n    const { days, hours, minutes, seconds, errorMsg } = this.state;\n    const convertedDays = this.getTwoDigitValue(days);\n    const convertedHours = this.getTwoDigitValue(hours);\n    const convertedMins = this.getTwoDigitValue(minutes);\n    const convertedSeconds = this.getTwoDigitValue(seconds);\n\n    return (\n      <div>\n        <div className=\"date-time-form\">\n          {<h1>Countdown Timer</h1>}\n          {errorMsg && <p className=\"error-msg\">{errorMsg}</p>}\n          <Form>\n            <Form.Group controlId=\"end_date\">\n              <Form.Label>End Date</Form.Label>\n              <DateTimePicker\n                format=\"dd/MM/y h:mm:ss a\"\n                onChange={this.onEndDateChange}\n                value={this.state.endDate}\n              />\n            </Form.Group>\n            <Button\n              variant=\"primary\"\n              type=\"button\"\n              onClick={this.calculateCountdown}\n            >\n              Begin Countdown\n            </Button>\n          </Form>\n        </div>\n        <div className=\"counter\">\n          <div className=\"time\">\n              <div className=\"time-value\">{convertedDays}</div>\n              <div className=\"time-label\">Days</div>\n          </div>\n          <div className=\"time\">\n          <div className=\"time-value\">{convertedHours}</div>\n          <div className=\"time-label\">Hours</div>\n          </div>\n          <div className=\"time\">\n              <div className=\"time-value\">{convertedMins}</div>\n              <div className=\"time-label\">Minutes</div>\n          </div>\n          <div className=\"time\">\n              <div className=\"time-value\">{convertedSeconds}</div>\n              <div className=\"time-label\">Seconds</div>\n          </div>\n      </div>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}